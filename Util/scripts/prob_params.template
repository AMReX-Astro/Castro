! This module stores the runtime parameters.  The probin_init() routine is
! used to initialize the runtime parameters

module probdata_module

  use amrex_fort_module, only: rt => amrex_real

  implicit none

  @@declarations@@

#ifdef AMREX_USE_CUDA
  @@cudaattributes@@
#endif

end module probdata_module

subroutine probdata_init(name, namlen)

  use probdata_module
  use castro_error_module, only: castro_error
  use amrex_fort_module, only: rt => amrex_real
 
  @@usestatements@@

  implicit none

  integer :: namlen
  integer :: name(namlen)

  integer :: un, i, status

  integer, parameter :: maxlen = 256
  character (len=maxlen) :: probin_file


  @@namelist@@

  @@allocations@@

  @@defaults@@


  ! create the filename
  if (namlen > maxlen) then
     call castro_error("probin file name too long")
  endif

  do i = 1, namlen
     probin_file(i:i) = char(name(i))
  end do


  ! read in the namelist
  open (newunit=un, file=probin_file(1:namlen), form='formatted', status='old')
  read (unit=un, nml=fortin, iostat=status)

  if (status < 0) then
     ! the namelist does not exist, so we just go with the defaults
     continue

  else if (status > 0) then
     ! some problem in the namelist
     call castro_error("ERROR: problem in the fortin namelist")
  endif

  close (unit=un)

end subroutine probdata_init

subroutine prob_params_pretty_print(name, namlen) bind(C, name="prob_params_pretty_print")

  use amrex_constants_module
  use probdata_module
  use castro_error_module, only: castro_error

  implicit none

  integer :: unit, i

  integer :: namlen
  integer :: name(namlen)

  logical :: ltest

  integer, parameter :: maxlen = 256
  character (len=maxlen) :: job_info

  if (namlen > maxlen) then
     call castro_error("job_info file name too long")
  endif

  do i = 1, namlen
     job_info(i:i) = char(name(i))
  end do

  ! open the job info file in Fortran
  open(newunit=unit, file=job_info(1:namlen), status="old", position="append")

  write(unit, *) " "
  write(unit, *) "fortin parameters:"
  @@printing@@

  close(unit=unit)

end subroutine prob_params_pretty_print
