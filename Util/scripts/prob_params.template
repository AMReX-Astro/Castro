! This module stores the runtime parameters.  The probin_init() routine is
! used to initialize the runtime parameters

module probdata_module

  use amrex_fort_module, only: rt => amrex_real
  use network, only: nspec, naux

  implicit none

  @@declarations@@

end module probdata_module

subroutine probdata_init(name, namlen) bind(C, name='probdata_init')

  use probdata_module
  use castro_error_module, only: castro_error
  use amrex_fort_module, only: rt => amrex_real
 
  @@usestatements@@

  implicit none

  integer :: namlen
  integer :: name(namlen)

  integer :: un, i, status

  integer, parameter :: maxlen = 256
  character (len=maxlen) :: probin_file


  @@namelist_vars@@

  @@allocations@@

  @@defaults@@


  ! create the filename
  if (namlen > maxlen) then
     call castro_error("probin file name too long")
  endif

  do i = 1, namlen
     probin_file(i:i) = char(name(i))
  end do


  @@namelist_gets@@

end subroutine probdata_init

subroutine prob_params_pretty_print(name, namlen) bind(C, name="prob_params_pretty_print")

  use amrex_constants_module
  use probdata_module
  use castro_error_module, only: castro_error

  implicit none

  integer :: unit, i

  integer :: namlen
  integer :: name(namlen)

  logical :: ltest

  integer, parameter :: maxlen = 256
  character (len=maxlen) :: job_info

  if (namlen > maxlen) then
     call castro_error("job_info file name too long")
  endif

  do i = 1, namlen
     job_info(i:i) = char(name(i))
  end do

  ! open the job info file in Fortran
  open(newunit=unit, file=job_info(1:namlen), status="old", position="append")

  write(unit, *) " "
  write(unit, *) "fortin parameters:"
  @@printing@@

  close(unit=unit)

end subroutine prob_params_pretty_print

module probparam_f90_to_cxx

  use iso_c_binding
  use probdata_module
  use amrex_fort_module, only: rt => amrex_real

  implicit none

contains

  @@cxx_gets@@

  @@cxx_sets@@

end module probparam_f90_to_cxx
