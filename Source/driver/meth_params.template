! This module stores the runtime parameters and integer names for
! indexing arrays.
!
! The Fortran-specific parameters are initialized in set_method_params(),
! and the ones that we are mirroring from C++ and obtaining through the
! ParmParse module are initialized in ca_set_castro_method_params().

module meth_params_module

  use castro_error_module
  use amrex_fort_module, only: rt => amrex_real

  ! this will import all of the indices into meth_params for convenience
  use state_indices_module

  implicit none

#ifdef RADIATION
  integer,  allocatable, save :: fspace_type
  logical,  allocatable, save :: do_inelastic_scattering
  logical,  allocatable, save :: comoving
#endif

  ! Numerical values corresponding to the gravity types
#ifdef GRAVITY
  integer, save, allocatable :: gravity_type_int
  integer, parameter :: ConstantGrav = 0
  integer, parameter :: MonopoleGrav = 1
  integer, parameter :: PoissonGrav = 2
  integer, parameter :: PrescribedGrav = 3
#endif

  integer, save :: numpts_1d

  real(rt), save, allocatable :: outflow_data_old(:,:)
  real(rt), save, allocatable :: outflow_data_new(:,:)
  real(rt), save :: outflow_data_old_time
  real(rt), save :: outflow_data_new_time
  logical,  save :: outflow_data_allocated
  real(rt), save :: max_dist

  ! these flags are for interpreting the EXT_DIR BCs
  integer, parameter :: EXT_UNDEFINED = -1
  integer, parameter :: EXT_HSE = 1

  ! Begin the declarations of the ParmParse parameters

  @@f90_declarations@@

  ! End the declarations of the ParmParse parameters

  character (len=:), allocatable :: dummy_string_param

  real(rt), save :: rot_vec(3)

contains

  subroutine ca_set_castro_method_params() bind(C, name="ca_set_castro_method_params")

    use amrex_parmparse_module, only: amrex_parmparse_build, amrex_parmparse_destroy, amrex_parmparse

    use amrex_fort_module, only : rt => amrex_real
    implicit none

    type (amrex_parmparse) :: pp

#ifdef RADIATION
    allocate(fspace_type)
    allocate(do_inelastic_scattering)
    allocate(comoving)
#endif

    @@set_castro_params@@


#ifdef GRAVITY
    ! Set the gravity type integer

    allocate(gravity_type_int)

    if (gravity_type == "ConstantGrav") then
       gravity_type_int = ConstantGrav
    else if (gravity_type == "MonopoleGrav") then
       gravity_type_int = MonopoleGrav
    else if (gravity_type == "PoissonGrav") then
       gravity_type_int = PoissonGrav
    else if (gravity_type == "PrescribedGrav") then
       gravity_type_int = PrescribedGrav
    else
       call castro_error("Unknown gravity type")
    end if
#endif

  end subroutine ca_set_castro_method_params


  subroutine ca_finalize_meth_params() bind(C, name="ca_finalize_meth_params")
    implicit none

#ifdef RADIATION
    deallocate(fspace_type)
    deallocate(do_inelastic_scattering)
    deallocate(comoving)
#endif

    @@free_castro_params@@

  end subroutine ca_finalize_meth_params


#ifdef RADIATION
  subroutine ca_init_radhydro_pars(fsp_type_in, do_is_in, com_in) &
                                   bind(C, name="ca_init_radhydro_pars")

    use rad_params_module, only: ngroups
    use amrex_fort_module, only: rt => amrex_real

    implicit none

    integer,  intent(in) :: fsp_type_in, do_is_in, com_in

    if (ngroups .eq. 1) then
       fspace_type = 1
    else
       fspace_type = fsp_type_in
    end if

    if (fsp_type_in .ne. 1 .and. fsp_type_in .ne. 2) then
       print *, "fspace_type = ", fspace_type
       call castro_error("Unknown fspace_type")
    end if

    do_inelastic_scattering = (do_is_in .ne. 0)

    if (com_in .eq. 1) then
       comoving = .true.
    else if (com_in .eq. 0) then
       comoving = .false.
    else
       call castro_error("Wrong value for comoving")
    end if

  end subroutine ca_init_radhydro_pars
#endif

end module meth_params_module
