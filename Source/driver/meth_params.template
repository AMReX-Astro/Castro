! This module stores the runtime parameters and integer names for 
! indexing arrays.
!
! The Fortran-specific parameters are initialized in set_method_params(),
! and the ones that we are mirroring from C++ and obtaining through the
! ParmParse module are initialized in ca_set_castro_method_params().

module meth_params_module

  use amrex_error_module
  use amrex_fort_module, only: rt => amrex_real

  implicit none

  ! number of ghost cells for the hyperbolic solver
  integer, parameter     :: NHYP    = 4

  ! conservative variables
  integer, allocatable, save :: NVAR
  integer, allocatable, save :: URHO, UMX, UMY, UMZ, UMR, UML, UMP, UEDEN, UEINT, UTEMP, UFA, UFS, UFX
  integer, allocatable, save :: USHK

  ! primitive variables
  integer, allocatable, save :: QVAR
  integer, allocatable, save :: QRHO, QU, QV, QW, QPRES, QREINT, QTEMP, QGAME
  integer, allocatable, save :: NQAUX, QGAMC, QC, QDPDR, QDPDE
#ifdef RADIATION
  integer, allocatable, save :: QGAMCG, QCG, QLAMS
#endif
  integer, allocatable, save :: QFA, QFS, QFX

  integer, allocatable, save :: nadv

  ! NQ will be the total number of primitive variables, hydro + radiation
  integer, allocatable, save :: NQ         

#ifdef RADIATION
  integer, save :: QRAD, QRADHI, QPTOT, QREITOT
  integer, save :: fspace_type
  logical, save :: do_inelastic_scattering
  logical, save :: comoving

  real(rt)        , save :: flatten_pp_threshold = -1.e0_rt
#endif

  integer, save, allocatable :: npassive
  integer, save, allocatable :: qpass_map(:), upass_map(:)

  ! These are used for the Godunov state
  ! Note that the velocity indices here are picked to be the same value
  ! as in the primitive variable array
  integer, save, allocatable :: NGDNV, GDRHO, GDU, GDV, GDW, GDPRES, GDGAME
#ifdef RADIATION
  integer, save, allocatable :: GDLAMS, GDERADS
#endif

  integer         , save :: numpts_1d

  real(rt)        , save, allocatable :: outflow_data_old(:,:)
  real(rt)        , save, allocatable :: outflow_data_new(:,:)
  real(rt)        , save :: outflow_data_old_time
  real(rt)        , save :: outflow_data_new_time
  logical         , save :: outflow_data_allocated
  real(rt)        , save :: max_dist

  character(len=:), allocatable :: gravity_type

  ! these flags are for interpreting the EXT_DIR BCs
  integer, parameter :: EXT_UNDEFINED = -1
  integer, parameter :: EXT_HSE = 1
  integer, parameter :: EXT_INTERP = 2 
  
  integer, allocatable, save :: xl_ext, yl_ext, zl_ext, xr_ext, yr_ext, zr_ext

  ! Create versions of these variables on the GPU
  ! the device update is then done in Castro_nd.f90

#ifdef AMREX_USE_CUDA
  attributes(managed) :: NVAR
  attributes(managed) :: URHO, UMX, UMY, UMZ, UMR, UML, UMP, UEDEN, UEINT, UTEMP, UFA, UFS, UFX
  attributes(managed) :: USHK
  attributes(managed) :: QVAR
  attributes(managed) :: QRHO, QU, QV, QW, QPRES, QREINT, QTEMP, QGAME
  attributes(managed) :: NQAUX, QGAMC, QC, QDPDR, QDPDE
#ifdef RADIATION
  attributes(managed) :: QGAMCG, QCG, QLAMS
#endif
  attributes(managed) :: QFA, QFS, QFX
  attributes(managed) :: nadv
  attributes(managed) :: NQ
  attributes(managed) :: npassive
  attributes(managed) :: qpass_map, upass_map
  attributes(managed) :: NGDNV, GDRHO, GDU, GDV, GDW, GDPRES, GDGAME
#ifdef RADIATION
  attributes(managed) :: GDLAMS, GDERADS
#endif
  attributes(managed) :: xl_ext, yl_ext, zl_ext, xr_ext, yr_ext, zr_ext
#endif

  !$acc declare &
  !$acc create(NVAR) &
  !$acc create(URHO, UMX, UMY, UMZ, UMR, UML, UMP, UEDEN, UEINT, UTEMP, UFA, UFS,UFX) &
  !$acc create(USHK) &
  !$acc create(QVAR) &
  !$acc create(QRHO, QU, QV, QW, QPRES, QREINT, QTEMP) &
  !$acc create(QC, QDPDR, QDPDE, QGAMC, QGAME) &
  !$acc create(NQ) &
#ifdef RADIATION
  !$acc create(QGAMCG, QCG, QLAMS) &
  !$acc create(QRAD, QRADHI, QPTOT, QREITOT) &
  !$acc create(fspace_type, do_inelastic_scattering, comoving) &
#endif
  !$acc create(QFA, QFS, QFX) &
  !$acc create(xl_ext, yl_ext, zl_ext, xr_ext, yr_ext, zr_ext)

  ! Begin the declarations of the ParmParse parameters

  @@f90_declarations@@

  ! End the declarations of the ParmParse parameters

  real(rt)        , save :: rot_vec(3)

contains

  subroutine ca_set_castro_method_params() bind(C, name="ca_set_castro_method_params")

    use amrex_parmparse_module, only: amrex_parmparse_build, amrex_parmparse_destroy, amrex_parmparse

    use amrex_fort_module, only : rt => amrex_real
    implicit none

    type (amrex_parmparse) :: pp


    allocate(NVAR)
    allocate(URHO, UMX, UMY, UMZ, UMR, UML, UMP, UEDEN, UEINT, UTEMP, UFA, UFS, UFX)
    allocate(USHK)
    allocate(QVAR)
    allocate(QRHO, QU, QV, QW, QPRES, QREINT, QTEMP, QGAME)
    allocate(NQAUX, QGAMC, QC, QDPDR, QDPDE)
#ifdef RADIATION
    allocate(QGAMCG, QCG, QLAMS)
#endif
    allocate(QFA, QFS, QFX)
    allocate(nadv)
    allocate(NQ)
    allocate(npassive)
    allocate(NGDNV, GDRHO, GDU, GDV, GDW, GDPRES, GDGAME)
#ifdef RADIATION
    allocate(GDLAMS, GDERADS)
#endif
    allocate(xl_ext, yl_ext, zl_ext, xr_ext, yr_ext, zr_ext)

    @@set_castro_params@@


    ! now set the external BC flags
    select case (xl_ext_bc_type)
    case ("hse", "HSE")
       xl_ext = EXT_HSE
    case ("interp", "INTERP")       
       xl_ext = EXT_INTERP
    case default
       xl_ext = EXT_UNDEFINED
    end select

    select case (yl_ext_bc_type)
    case ("hse", "HSE")
       yl_ext = EXT_HSE
    case ("interp", "INTERP")       
       yl_ext = EXT_INTERP
    case default
       yl_ext = EXT_UNDEFINED
    end select

    select case (zl_ext_bc_type)
    case ("hse", "HSE")
       zl_ext = EXT_HSE
    case ("interp", "INTERP")       
       zl_ext = EXT_INTERP
    case default
       zl_ext = EXT_UNDEFINED
    end select

    select case (xr_ext_bc_type)
    case ("hse", "HSE")
       xr_ext = EXT_HSE
    case ("interp", "INTERP")       
       xr_ext = EXT_INTERP
    case default
       xr_ext = EXT_UNDEFINED
    end select

    select case (yr_ext_bc_type)
    case ("hse", "HSE")
       yr_ext = EXT_HSE
    case ("interp", "INTERP")       
       yr_ext = EXT_INTERP
    case default
       yr_ext = EXT_UNDEFINED
    end select

    select case (zr_ext_bc_type)
    case ("hse", "HSE")
       zr_ext = EXT_HSE
    case ("interp", "INTERP")       
       zr_ext = EXT_INTERP
    case default
       zr_ext = EXT_UNDEFINED
    end select

    !$acc update device(xl_ext, yl_ext, zl_ext, xr_ext, yr_ext, zr_ext)


  end subroutine ca_set_castro_method_params


  subroutine ca_finalize_meth_params() bind(C, name="ca_finalize_meth_params")
    implicit none

    deallocate(NVAR)
    deallocate(URHO, UMX, UMY, UMZ, UMR, UML, UMP, UEDEN, UEINT, UTEMP, UFA, UFS, UFX)
    deallocate(USHK)
    deallocate(QVAR)
    deallocate(QRHO, QU, QV, QW, QPRES, QREINT, QTEMP, QGAME)
    deallocate(NQAUX, QGAMC, QC, QDPDR, QDPDE)
#ifdef RADIATION
    deallocate(QGAMCG, QCG, QLAMS)
#endif
    deallocate(QFA, QFS, QFX)
    deallocate(nadv)
    deallocate(NQ)
    deallocate(npassive)
    deallocate(NGDNV, GDRHO, GDU, GDV, GDW, GDPRES, GDGAME)
#ifdef RADIATION
    deallocate(GDLAMS, GDERADS)
    deallocate(xl_ext, yl_ext, zl_ext, xr_ext, yr_ext, zr_ext)
#endif

    @@free_castro_params@@
    
  end subroutine ca_finalize_meth_params


#ifdef RADIATION
  subroutine ca_init_radhydro_pars(fsp_type_in, do_is_in, com_in,fppt) &
       bind(C, name="ca_init_radhydro_pars")

    use rad_params_module, only : ngroups

    use amrex_fort_module, only : rt => amrex_real

    implicit none

    integer, intent(in) :: fsp_type_in, do_is_in, com_in
    real(rt)        , intent(in) :: fppt


    if (ngroups .eq. 1) then
       fspace_type = 1
    else
       fspace_type = fsp_type_in
    end if

#ifndef AMREX_USE_GPU
    if (fsp_type_in .ne. 1 .and. fsp_type_in .ne. 2) then
       call amrex_error("Unknown fspace_type", fspace_type)
    end if
#endif
    
    do_inelastic_scattering = (do_is_in .ne. 0)
    
    if (com_in .eq. 1) then
       comoving = .true.
    else if (com_in .eq. 0) then
       comoving = .false.
    else
#ifndef AMREX_USE_GPU
       call amrex_error("Wrong value for comoving", fspace_type)
#endif
    end if
    
    flatten_pp_threshold = fppt
    
    !$acc update &
    !$acc device(NQ,NQAUX) &
    !$acc device(QRAD, QRADHI, QPTOT, QREITOT) &
    !$acc device(fspace_type) &
    !$acc device(do_inelastic_scattering) &
    !$acc device(comoving)
    !$acc device(flatten_pp_threshold = -1.e0_rt)

  end subroutine ca_init_radhydro_pars
#endif

end module meth_params_module
