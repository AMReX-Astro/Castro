
// This file is automatically created by parse_castro_params.py.  To update
// or add runtime parameters, please edit _cpp_parameters and then run
// mk_params.sh

pp.query("state_interp_order", state_interp_order);
pp.query("lin_limit_state_interp", lin_limit_state_interp);
pp.query("state_nghost", state_nghost);
pp.query("do_reflux", do_reflux);
pp.query("update_sources_after_reflux", update_sources_after_reflux);
pp.query("use_custom_knapsack_weights", use_custom_knapsack_weights);
pp.query("difmag", difmag);
pp.query("small_dens", small_dens);
pp.query("small_temp", small_temp);
pp.query("small_pres", small_pres);
pp.query("small_ener", small_ener);
pp.query("do_hydro", do_hydro);
pp.query("time_integration_method", time_integration_method);
pp.query("limit_fourth_order", limit_fourth_order);
pp.query("initialization_is_cell_average", initialization_is_cell_average);
pp.query("use_reconstructed_gamma1", use_reconstructed_gamma1);
pp.query("add_ext_src", add_ext_src);
pp.query("hybrid_hydro", hybrid_hydro);
pp.query("ppm_type", ppm_type);
pp.query("ppm_temp_fix", ppm_temp_fix);
pp.query("ppm_predict_gammae", ppm_predict_gammae);
pp.query("ppm_reference_eigenvectors", ppm_reference_eigenvectors);
pp.query("plm_iorder", plm_iorder);
pp.query("hybrid_riemann", hybrid_riemann);
pp.query("riemann_solver", riemann_solver);
pp.query("cg_maxiter", cg_maxiter);
pp.query("cg_tol", cg_tol);
pp.query("cg_blend", cg_blend);
pp.query("use_eos_in_riemann", use_eos_in_riemann);
pp.query("riemann_speed_limit", riemann_speed_limit);
pp.query("use_flattening", use_flattening);
pp.query("transverse_use_eos", transverse_use_eos);
pp.query("transverse_reset_density", transverse_reset_density);
pp.query("transverse_reset_rhoe", transverse_reset_rhoe);
pp.query("dual_energy_eta1", dual_energy_eta1);
pp.query("dual_energy_eta2", dual_energy_eta2);
pp.query("use_pslope", use_pslope);
pp.query("limit_fluxes_on_small_dens", limit_fluxes_on_small_dens);
pp.query("density_reset_method", density_reset_method);
pp.query("allow_small_energy", allow_small_energy);
pp.query("do_sponge", do_sponge);
pp.query("sponge_implicit", sponge_implicit);
pp.query("source_term_predictor", source_term_predictor);
pp.query("first_order_hydro", first_order_hydro);
pp.query("xl_ext_bc_type", xl_ext_bc_type);
pp.query("xr_ext_bc_type", xr_ext_bc_type);
pp.query("yl_ext_bc_type", yl_ext_bc_type);
pp.query("yr_ext_bc_type", yr_ext_bc_type);
pp.query("zl_ext_bc_type", zl_ext_bc_type);
pp.query("zr_ext_bc_type", zr_ext_bc_type);
pp.query("hse_zero_vels", hse_zero_vels);
pp.query("hse_interp_temp", hse_interp_temp);
pp.query("hse_reflect_vels", hse_reflect_vels);
pp.query("mol_order", mol_order);
pp.query("sdc_order", sdc_order);
pp.query("sdc_extra", sdc_extra);
pp.query("sdc_solver", sdc_solver);
pp.query("sdc_solver_tol_dens", sdc_solver_tol_dens);
pp.query("sdc_solver_tol_spec", sdc_solver_tol_spec);
pp.query("sdc_solver_tol_ener", sdc_solver_tol_ener);
pp.query("sdc_solver_atol", sdc_solver_atol);
pp.query("sdc_solver_relax_factor", sdc_solver_relax_factor);
pp.query("sdc_solve_for_rhoe", sdc_solve_for_rhoe);
pp.query("sdc_use_analytic_jac", sdc_use_analytic_jac);
pp.query("fixed_dt", fixed_dt);
pp.query("initial_dt", initial_dt);
pp.query("dt_cutoff", dt_cutoff);
pp.query("max_dt", max_dt);
pp.query("cfl", cfl);
pp.query("init_shrink", init_shrink);
pp.query("change_max", change_max);
pp.query("plot_per_is_exact", plot_per_is_exact);
pp.query("small_plot_per_is_exact", small_plot_per_is_exact);
pp.query("use_retry", use_retry);
pp.query("retry_tolerance", retry_tolerance);
pp.query("retry_neg_dens_factor", retry_neg_dens_factor);
pp.query("retry_subcycle_factor", retry_subcycle_factor);
pp.query("use_post_step_regrid", use_post_step_regrid);
pp.query("max_subcycles", max_subcycles);
pp.query("sdc_iters", sdc_iters);
pp.query("dtnuc_e", dtnuc_e);
pp.query("dtnuc_X", dtnuc_X);
pp.query("dtnuc_X_threshold", dtnuc_X_threshold);
pp.query("do_react", do_react);
pp.query("react_T_min", react_T_min);
pp.query("react_T_max", react_T_max);
pp.query("react_rho_min", react_rho_min);
pp.query("react_rho_max", react_rho_max);
pp.query("disable_shock_burning", disable_shock_burning);
pp.query("T_guess", T_guess);
pp.query("do_grav", do_grav);
pp.query("moving_center", moving_center);
pp.query("grav_source_type", grav_source_type);
pp.query("do_rotation", do_rotation);
pp.query("do_acc", do_acc);
pp.query("bndry_func_thread_safe", bndry_func_thread_safe);
pp.query("grown_factor", grown_factor);
pp.query("star_at_center", star_at_center);
pp.query("do_scf_initial_model", do_scf_initial_model);
pp.query("scf_maximum_density", scf_maximum_density);
pp.query("scf_equatorial_radius", scf_equatorial_radius);
pp.query("scf_polar_radius", scf_polar_radius);
pp.query("scf_relax_tol", scf_relax_tol);
pp.query("scf_max_iterations", scf_max_iterations);
pp.query("do_special_tagging", do_special_tagging);
pp.query("spherical_star", spherical_star);
pp.query("v", verbose);
pp.query("dump_old", dump_old);
pp.query("print_fortran_warnings", print_fortran_warnings);
pp.query("print_update_diagnostics", print_update_diagnostics);
pp.query("track_grid_losses", track_grid_losses);
pp.query("sum_interval", sum_interval);
pp.query("sum_per", sum_per);
pp.query("show_center_of_mass", show_center_of_mass);
pp.query("hard_cfl_limit", hard_cfl_limit);
pp.query("job_name", job_name);
pp.query("output_at_completion", output_at_completion);
pp.query("reset_checkpoint_time", reset_checkpoint_time);
pp.query("reset_checkpoint_step", reset_checkpoint_step);
#ifdef AMREX_PARTICLES
pp.query("do_tracer_particles", do_tracer_particles);
#endif
#ifdef ROTATION
pp.query("rotational_period", rotational_period);
pp.query("rotational_dPdt", rotational_dPdt);
pp.query("rotation_include_centrifugal", rotation_include_centrifugal);
pp.query("rotation_include_coriolis", rotation_include_coriolis);
pp.query("rotation_include_domegadt", rotation_include_domegadt);
pp.query("state_in_rotating_frame", state_in_rotating_frame);
pp.query("rot_source_type", rot_source_type);
pp.query("implicit_rotation_update", implicit_rotation_update);
pp.query("rot_axis", rot_axis);
#endif
#ifdef GRAVITY
pp.query("use_point_mass", use_point_mass);
pp.query("point_mass", point_mass);
pp.query("point_mass_fix_solution", point_mass_fix_solution);
#endif
#ifdef DIFFUSION
pp.query("diffuse_temp", diffuse_temp);
pp.query("diffuse_cutoff_density", diffuse_cutoff_density);
pp.query("diffuse_cutoff_density_hi", diffuse_cutoff_density_hi);
pp.query("diffuse_cond_scale_fac", diffuse_cond_scale_fac);
#endif
