! This module stores the runtime parameters.  The probin_init() routine is
! used to initialize the runtime parameters

module extern_probin_module

  use amrex_fort_module, only: rt => amrex_real

  implicit none

  private

  @@declarationsA@@

#ifdef AMREX_USE_CUDA
  @@cudaattributesA@@
#endif

end module extern_probin_module

subroutine runtime_init(name, namlen)

  use extern_probin_module
  use amrex_error_module, only: amrex_error

  implicit none

  integer :: namlen
  integer :: name(namlen)
  
  integer :: un, i, status

  integer, parameter :: maxlen = 256
  character (len=maxlen) :: probin


  @@namelist@@

  @@allocations@@

  @@defaults@@


  ! create the filename
  if (namlen > maxlen) then
     call amrex_error("probin file name too long")
  endif

  do i = 1, namlen
     probin(i:i) = char(name(i))
  end do


  ! read in the namelist
  un = 9
  open (unit=un, file=probin(1:namlen), form='formatted', status='old')
  read (unit=un, nml=extern, iostat=status)

  if (status < 0) then
     ! the namelist does not exist, so we just go with the defaults
     continue

  else if (status > 0) then
     ! some problem in the namelist
     call amrex_error("ERROR: problem in the extern namelist")
  endif

  close (unit=un)

  @@acc@@

end subroutine runtime_init

subroutine runtime_pretty_print(name, namlen) bind(C, name="runtime_pretty_print")

  use amrex_constants_module
  use extern_probin_module
  use amrex_error_module, only: amrex_error

  implicit none

  integer :: unit, i

  integer :: namlen
  integer :: name(namlen)

  logical :: ltest

  integer, parameter :: maxlen = 256
  character (len=maxlen) :: probin

  if (namlen > maxlen) then
     call amrex_error("probin file name too long")
  endif

  do i = 1, namlen
     probin(i:i) = char(name(i))
  end do

  ! open the job info file in Fortran
  open(newunit=unit, file=probin(1:namlen), status="old", position="append")

  @@printing@@

  close(unit=unit)

end subroutine runtime_pretty_print
