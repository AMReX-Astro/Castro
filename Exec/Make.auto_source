
#------------------------------------------------------------------------------
# make generated source files location
#------------------------------------------------------------------------------
VPATH_LOCATIONS += $(CASTRO_AUTO_SOURCE_DIR)
INCLUDE_LOCATIONS += $(CASTRO_AUTO_SOURCE_DIR)


#------------------------------------------------------------------------------
# Microphysics runtime parameters
#------------------------------------------------------------------------------

# runtime parameter support for extern/ routines
F90EXE_sources += extern.F90
CEXE_sources += extern_parameters.cpp
FEXE_headers += extern_parameters_F.H
CEXE_headers += extern_parameters.H

EXTERN_TEMPLATE := $(MICROPHYSICS_HOME)/interfaces/extern_probin.template

# these are for finding runtime parameters
EXTERN_SEARCH += $(EXTERN_CORE)
EXTERN_SEARCH += $(MICROPHYSICS_HOME)/networks/

EXTERN_PARAMETERS := $(foreach dir, $(EXTERN_SEARCH),$(realpath $(wildcard $(dir)/_parameters)))

$(CASTRO_AUTO_SOURCE_DIR)/extern_parameters.cpp: $(CASTRO_AUTO_SOURCE_DIR)/extern.F90

$(CASTRO_AUTO_SOURCE_DIR)/extern.F90: $(EXTERN_PARAMETERS) $(EXTERN_TEMPLATE)
	@if [ ! -d $(CASTRO_AUTO_SOURCE_DIR) ]; then mkdir -p $(CASTRO_AUTO_SOURCE_DIR); fi
	$(MICROPHYSICS_HOME)/util/build_scripts/write_probin.py \
           -t $(EXTERN_TEMPLATE) -o $(CASTRO_AUTO_SOURCE_DIR)/extern.F90 -n extern \
           --cxx_prefix $(CASTRO_AUTO_SOURCE_DIR)/extern \
           --pa "$(EXTERN_PARAMETERS)"


#------------------------------------------------------------------------------
# problem specific parameters
#------------------------------------------------------------------------------

# runtime parameter support for extern/ routines
F90EXE_sources += prob_params_auto.F90
CEXE_sources += prob_parameters.cpp
FEXE_headers += prob_parameters_F.H
CEXE_headers += prob_parameters.H

$(CASTRO_AUTO_SOURCE_DIR)/prob_parameters.cpp: $(CASTRO_AUTO_SOURCE_DIR)/prob_params_auto.F90

PROB_PARAMS_TEMPLATE := $(TOP)/Util/scripts/prob_params.template
# search Bdirs for _prob_params files
PROB_PARAMETERS := $(foreach dir, $(Bdirs), $(wildcard $(TOP)/$(dir)/_prob_params))
# the problem's own parameters always come at the end so they override
# any others
PROB_PARAMETERS += $(wildcard $(PROBLEM_DIR)/_prob_params)

# Note that $(PROB_PARAMETERS) may not exist so we use wildcard to condition
# on that; if it doesn't exist, it's ignored as a make target. The default
# parameters file will always exist.
$(CASTRO_AUTO_SOURCE_DIR)/prob_params_auto.F90: $(DEFAULT_PROB_PARAMETERS) $(wildcard $(PROB_PARAMETERS)) $(PROB_PARAMS_TEMPLATE)
	@if [ ! -d $(CASTRO_AUTO_SOURCE_DIR) ]; then mkdir -p $(CASTRO_AUTO_SOURCE_DIR); fi
	PYTHONPATH=$(MICROPHYSICS_HOME)/util/build_scripts $(TOP)/Util/scripts/write_probdata.py \
           -t $(PROB_PARAMS_TEMPLATE) -o $(CASTRO_AUTO_SOURCE_DIR)/prob_params_auto.F90 \
           -p "$(PROB_PARAMETERS)" \
           --cxx_prefix $(CASTRO_AUTO_SOURCE_DIR)/prob \

#------------------------------------------------------------------------------
# Castro C++ parameters
#------------------------------------------------------------------------------

F90EXE_sources += meth_params_nd.F90

CPP_PARAMETERS := $(TOP)/Source/driver/_cpp_parameters
METH_PARAMS_TEMPLATE := $(TOP)/Source/driver/meth_params.template

$(CASTRO_AUTO_SOURCE_DIR)/meth_params_nd.F90: $(CPP_PARAMETERS) $(METH_PARAMS_TEMPLATE)
	@if [ ! -d $(CASTRO_AUTO_SOURCE_DIR) ]; then mkdir -p $(CASTRO_AUTO_SOURCE_DIR); fi
	PYTHONPATH=$(MICROPHYSICS_HOME)/util/build_scripts $(TOP)/Source/driver/parse_castro_params.py -m $(METH_PARAMS_TEMPLATE) -o $(CASTRO_AUTO_SOURCE_DIR) $(CPP_PARAMETERS)

# for debugging
test_cxx_params: $(CASTRO_AUTO_SOURCE_DIR)/meth_params_nd.F90

#------------------------------------------------------------------------------
# state variable info
#-------------------------------------------------------------------------------
$(CASTRO_AUTO_SOURCE_DIR)/state_indices.H: $(CASTRO_AUTO_SOURCE_DIR)/state_indices_nd.F90
	echo "state_indices.H will be generated at the same time as state_indices_nd.F90"

$(CASTRO_AUTO_SOURCE_DIR)/state_indices_nd.F90:
	$(CASTRO_HOME)/Source/driver/set_variables.py \
           --defines "$(DEFINES)" \
           --nadv $(NUMADV) \
           --ngroups $(NGROUPS) \
           --odir $(CASTRO_AUTO_SOURCE_DIR) \
           $(CASTRO_HOME)/Source/driver/_variables

# for debugging
test_variables: $(CASTRO_AUTO_SOURCE_DIR)/state_indices_nd.F90


#------------------------------------------------------------------------------
# build info
#------------------------------------------------------------------------------

# job_info support
CEXE_headers += $(AMREX_HOME)/Tools/C_scripts/AMReX_buildInfo.H
INCLUDE_LOCATIONS +=  $(AMREX_HOME)/Tools/C_scripts


MNAMES := EOS=$(EOS_PATH) NETWORK=$(NETWORK_PATH)
ifeq ($(USE_DIFFUSION), TRUE)
   MNAMES += CONDUCTIVITY=$(CONDUCTIVITY_PATH)
endif

ifeq ($(USE_RAD), TRUE)
   MNAMES += OPACITY=$(OPAC_PATH)
endif

# we make AMReX_buildInfo.cpp as we make the .o file, so we can delete
# it immediately.  this way if the build is interrupted, we are
# guaranteed to remake it

objForExecs += $(objEXETempDir)/AMReX_buildInfo.o

.FORCE:
.PHONE: .FORCE

# set BUILD_GIT_NAME and BUILD_GIT_DIR if you are building in a
# git-controlled dir not under Castro/
EXTRA_BUILD_INFO :=
ifdef BUILD_GIT_NAME
   EXTRA_BUILD_INFO := --build_git_name "$(BUILD_GIT_NAME)" \
                       --build_git_dir "$(BUILD_GIT_DIR)"
endif

$(objEXETempDir)/AMReX_buildInfo.o: .FORCE
	$(AMREX_HOME)/Tools/C_scripts/makebuildinfo_C.py \
          --amrex_home "$(AMREX_HOME)" \
          --COMP "$(COMP)" --COMP_VERSION "$(COMP_VERSION)" \
          --CXX_comp_name "$(CXX)" --CXX_flags "$(CXXFLAGS) $(CPPFLAGS) $(includes)" \
          --F_comp_name "$(F90)" --F_flags "$(F90FLAGS)" \
          --link_flags "$(LDFLAGS)" --libraries "$(libraries)" \
          --MODULES "$(MNAMES)" $(EXTRA_BUILD_INFO) \
          --GIT "$(TOP) $(AMREX_HOME) $(MICROPHYSICS_HOME)"
	$(SILENT) $(CCACHE) $(CXX) $(CXXFLAGS) $(CPPFLAGS) -c $(CXXEXEFLAGS) AMReX_buildInfo.cpp -o $(objEXETempDir)/AMReX_buildInfo.o
	$(SILENT) $(RM) AMReX_buildInfo.cpp
