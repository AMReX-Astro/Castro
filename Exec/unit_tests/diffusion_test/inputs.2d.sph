#------------------  INPUTS TO MAIN PROGRAM  -------------------
max_step = 50000
stop_time = 0.001

# PROBLEM SIZE & GEOMETRY
geometry.is_periodic = 0    0
geometry.coord_sys   = 2    # 2 = SPHERICAL
geometry.prob_lo     = 0.1       0.0
geometry.prob_hi     = 1.0       3.141592653589793238
amr.n_cell           = 64        64

castro.allow_non_unit_aspect_zones = 1

# >>>>>>>>>>>>>  BC FLAGS <<<<<<<<<<<<<<<<
# 0 = Interior           3 = Symmetry
# 1 = Inflow             4 = SlipWall
# 2 = Outflow            5 = NoSlipWall
# >>>>>>>>>>>>>  BC FLAGS <<<<<<<<<<<<<<<<
castro.lo_bc       =  2   3
castro.hi_bc       =  2   3

# WHICH PHYSICS
castro.do_hydro = 0
castro.diffuse_temp = 1
castro.do_react = 0

# TIME STEP CONTROL

castro.cfl            = 0.5     # cfl number for hyperbolic system
castro.init_shrink    = 0.1    # scale back initial timestep
castro.change_max     = 1.1     # maximum increase in dt over successive steps

# DIAGNOSTICS & VERBOSITY
castro.sum_interval   = 1       # timesteps between computing mass
castro.v              = 1       # verbosity in Castro.cpp
amr.v                 = 1       # verbosity in Amr.cpp
#amr.grid_log         = grdlog  # name of grid logging file

# REFINEMENT / REGRIDDING
amr.max_level       = 0       # maximum level number allowed
amr.ref_ratio       = 2 2 2 2 # refinement ratio
amr.regrid_int      = 2       # how often to regrid
amr.blocking_factor = 8       # block factor in grid generation
amr.max_grid_size   = 32

amr.refinement_indicators = temperr tempgrad

amr.refine.temperr.value_greater = 1.1
amr.refine.temperr.field_name = Temp
amr.refine.temperr.max_level = 3

amr.refine.tempgrad.gradient = 0.1
amr.refine.tempgrad.field_name = Temp
amr.refine.tempgrad.max_level = 3

# CHECKPOINT FILES
amr.check_file      = diffuse_chk     # root name of checkpoint file
amr.check_int       = 1000     # number of timesteps between checkpoints

# PLOTFILES
amr.plot_file       = diffuse_plt
#amr.plot_int        = 10
amr.plot_per        = 0.0001
amr.derive_plot_vars=ALL

# PROBLEM PARAMETERS
problem.diff_coeff = 1.0

# To test the theta-dependence of the spherical 2D diffusion solver, either
# 1. Set a nonzero problem center for gaussian initial condition via problem.center
#    This requires resolution convergence test
# 2. Initialize problem with theta-dependent initial condition via gaussian_init=0.
#    There is an analytic solution for this.

# For spherical 2D, manually setting problem center corresponds to change it
# in the cylindrical direction, i.e. center[0] refers to cylindrical r-direction
# and center[1] refers to z-direction.
# Note that changing problem::center only works with gaussian initial condition,
# i.e. problem.gaussian_init=1
# Put gaussian in the center of the domain, and use outflow condition in r-dir
# Make sure the Gaussian diffuses quickly before reaching the boundary.

# problem.center = 0.5 0 0

# Setting problem.gaussian_init=0 initializes problem with initial condition
# that is oscillatory in r, but has theta variations.
# Use Dirichlet boundary in r-dir for this
problem.gaussian_init = 0

# CONDUCTIVITY
conductivity.const_conductivity = 10.0
castro.diffuse_use_amrex_mlmg = 0

# EOS
eos.eos_assume_neutral = 1
