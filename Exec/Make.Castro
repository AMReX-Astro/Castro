CASTRO_HOME ?= /path/to/Castro

# radiation needs hypre
HYPRE_DIR ?= /path/to/Hypre

# system blas
BLAS_LIBRARY ?= -lopenblas

TOP := $(CASTRO_HOME)

# Allow a problem setup to define a root location.
# Otherwise, assume we're building in the current directory.

PROBLEM_DIR ?= ./

# Microphysics is a git submodule of Castro. By default
# we assume it is in the external/ directory.
# The user may override this with their own installation
# of Microphysics as long as they set the environment variable
# MICROPHYSICS_HOME.

MICROPHYSICS_HOME ?= $(TOP)/external/Microphysics

# Check to make sure that Microphysics actually exists,
# using an arbitrary file that must exist to check.
# Throw an error if we don't have Microphysics.
ifeq ("$(wildcard $(MICROPHYSICS_HOME)/Make.Microphysics)","")
  $(error Microphysics has not been downloaded. Please run "git submodule update --init" from the top level of the code)
endif

# Locations within Microphysics
EOS_HOME ?= $(MICROPHYSICS_HOME)/EOS
NETWORK_HOME ?= $(MICROPHYSICS_HOME)/networks
CONDUCTIVITY_HOME ?= $(MICROPHYSICS_HOME)/conductivity

# AMReX is a git submodule of Castro. By default
# we assume it is in the external/ directory.
# The user may override this with their own installation
# of AMReX as long as they set the environment variable
# AMREX_HOME.

AMREX_HOME ?= $(TOP)/external/amrex

# Check to make sure that AMReX actually exists,
# using an arbitrary file that must exist to check.
# Throw an error if we don't have AMReX.
ifeq ("$(wildcard $(AMREX_HOME)/Tools/GNUMake/Make.defs)","")
  $(error AMReX has not been downloaded. Please run "git submodule update --init" from the top level of the code)
endif

# Require C++17
CXXSTD := c++17

# default integrator
INTEGRATOR_DIR ?= VODE

# number of passively advected quantities that are not species or auxillary
NUMADV ?= 0

# number of radiation groups
NGROUPS ?= 1

# this can be turned off for unit tests, etc., and not
# the entire Castro build
USE_ALL_CASTRO ?= TRUE

USE_AMR_CORE ?= TRUE

# hack for now -- CUDA processing doesn't respect functions blocked by
# ifdefs, so we need to define EXTRA_THERMO
ifeq ($(USE_CUDA),TRUE)
  DEFINES += -DEXTRA_THERMO
endif

# all Castro problems use a dimension-agnostic interface
DIMENSION_AGNOSTIC = TRUE

EBASE = Castro

# EXTERN_CORE is simply a list of the directories we use in EOS,
# Networks and Util this list will be searched for runtime parameters
EXTERN_CORE ?=

ifeq ($(USE_SDC), TRUE)
  $(error USE_SDC is no longer supported.  Use with USE_SIMPLIFIED_SDC or USE_TRUE_SDC)
endif

# need to put any build suffices before Make.defs
ifeq ($(USE_SIMPLIFIED_SDC), TRUE)
  USERSuffix = .SMPLSDC
endif

ifeq ($(USE_TRUE_SDC), TRUE)
  USERSuffix = .TRUESDC
endif

USE_MLMG = FALSE

ifeq ($(USE_RAD), TRUE)
  USE_HYPRE := TRUE
  USE_MLMG = TRUE
endif

ifeq ($(USE_SYSTEM_BLAS), TRUE)
  LIBRARIES += $(BLAS_LIBRARY)
endif

ifeq ($(USE_CUDA),TRUE)
  DEFINES += -DCUDA
  CUDA_VERBOSE = FALSE

  # We don't currently support host-side OpenMP being enabled
  # when using CUDA. Throw an error to prevent this case.
  ifeq ($(USE_OMP),TRUE)
    $(error OpenMP is not supported by Castro when building with CUDA)
  endif
endif

# Allow a problem to specify that we want to initialize
# on the GPU if we're using CUDA. This is a subset of
# dimension agnostic problems, and it requires a different
# interface to initdata, so we want to define this even
# if we're not using CUDA.

ifeq ($(GPU_COMPATIBLE_PROBLEM),TRUE)
    DEFINES += -DGPU_COMPATIBLE_PROBLEM
endif

include $(AMREX_HOME)/Tools/GNUMake/Make.defs

CASTRO_AUTO_SOURCE_DIR := $(TmpBuildDir)/castro_sources/$(optionsSuffix).EXE


all: build_status $(executable)
	@echo SUCCESS

build_status:
	$(AMREX_HOME)/Tools/C_scripts/describe_sources.py \
          --git_names "Castro AMReX Microphysics" \
          --git_dirs "$(TOP) $(AMREX_HOME) $(MICROPHYSICS_HOME)"

# Castro uses a coarse grained OMP approach
DEFINES += -DCRSEGRNDOMP

# The default is to include the sponge functionality
DEFINES += -DSPONGE

# OpenACC support
ifeq ($(USE_ACC), TRUE)
  DEFINES += -DACC
endif



#------------------------------------------------------------------------------
# Castro directories
#------------------------------------------------------------------------------

ifeq ($(USE_ALL_CASTRO), TRUE)
  Bdirs := Source/driver Source/hydro \
           Source/problems Source/sources
endif

MAX_NPTS_MODEL ?= 10000
NUM_MODELS ?= 1

ifeq ($(USE_CXX_MODEL_PARSER), TRUE)
  Bdirs += Util/model_parser_cxx
  DEFINES += -DCXX_MODEL_PARSER -DNPTS_MODEL=$(MAX_NPTS_MODEL) -DNUM_MODELS=$(NUM_MODELS)
endif

# add / define any special physics we need

ifeq ($(USE_MHD), TRUE)
  Bdirs += Source/mhd
  DEFINES += -DMHD
else
  Bdirs += Source/hydro
endif

ifeq ($(USE_GRAV), TRUE)
  Bdirs += Source/gravity Source/scf 
  DEFINES += -DGRAVITY
  USE_MLMG = TRUE
endif

ifeq ($(USE_GR), TRUE)
  DEFINES += -DGR_GRAV
endif

ifeq ($(USE_REACT), TRUE)
  Bdirs += Source/reactions
  DEFINES += -DREACTIONS

  ifeq ($(USE_TRUE_SDC), TRUE)
    # we need the compositional derivatives for SDC
    DEFINES += -DEXTRA_THERMO
  endif

  ifeq ($(USE_SIMPLIFIED_SDC), TRUE)
    # we need the compositional derivatives for SDC
    DEFINES += -DEXTRA_THERMO
    # we only implement this for C++ reactions
  endif

  USE_CXX_REACTIONS = TRUE
  DEFINES += -DCXX_REACTIONS
endif

ifeq ($(USE_REACT_SPARSE_JACOBIAN), TRUE)
  DEFINES += -DREACT_SPARSE_JACOBIAN

  # The following is sometimes useful to turn on for debugging sparse J indices
  # (if a get/set/scale is called with (row, col) not in the sparse J, stop)
  # Otherwise, set/scale do nothing, and get returns 0.
  ifeq ($(USE_SPARSE_STOP_ON_OOB), TRUE)
    DEFINES += -DSPARSE_STOP_ON_OOB
  endif
endif

ifeq ($(USE_SIMPLIFIED_SDC), TRUE)
  DEFINES += -DPRIM_SPECIES_HAVE_SOURCES -DSDC_EVOLVE_ENERGY
endif

ifeq ($(USE_TRUE_SDC), TRUE)
  Bdirs += Source/sdc
endif

ifeq ($(USE_DIFFUSION), TRUE)
  Bdirs += Source/diffusion
  DEFINES += -DDIFFUSION
  USE_MLMG = TRUE
  USE_CONDUCTIVITY = TRUE
endif

ifeq ($(USE_HYBRID_MOMENTUM), TRUE)
  ifeq ($(DIM), 3)
    DEFINES += -DHYBRID_MOMENTUM
  else
    $(error USE_HYBRID_MOMENTUM requires 3-d)
  endif
endif

ifeq ($(USE_SHOCK_VAR), TRUE)
  DEFINES += -DSHOCK_VAR
endif

ifeq ($(USE_AUX_UPDATE), TRUE)
  DEFINES += -DAUX_UPDATE
endif

ifeq ($(USE_POST_SIM), TRUE)
  DEFINES += -DDO_PROBLEM_POST_SIMULATION
endif

ifeq ($(USE_RAD), TRUE)
  Bdirs += Source/radiation Source/radiation/_interpbndry
  DEFINES += -DRADIATION
  DEFINES += -DRAD_INTERP

  DEFINES += -DNGROUPS=$(NGROUPS)

  EXTERN_CORE += $(TOP)/Util/LAPACK
endif

ifeq ($(USE_MAESTRO_INIT), TRUE)
   DEFINES +=  -DBL_NOLINEVALUES -DBL_PARALLEL_IO -DMAESTRO_INIT
   CEXE_headers += DataServices.H AmrData.H AmrvisConstants.H
   CEXE_sources += DataServices.cpp AmrData.cpp
   FEXE_sources += FABUTIL_$(DIM)D.F
   VPATH_LOCATIONS   += $(AMREX_HOME)/Src/Extern/amrdata
   INCLUDE_LOCATIONS += $(AMREX_HOME)/Src/Extern/amrdata
endif

ifeq ($(USE_ROTATION), TRUE)
  Bdirs += Source/rotation
  DEFINES += -DROTATION
endif

ifeq ($(USE_PARTICLES), TRUE)
  Bdirs += Source/particles
endif

Bpack += $(foreach dir, $(Bdirs), $(TOP)/$(dir)/Make.package)
Blocs += $(foreach dir, $(Bdirs), $(TOP)/$(dir))


#------------------------------------------------------------------------------
# AMReX
#------------------------------------------------------------------------------

# core AMReX directories -- note the Make.package for these adds these
# directories into VPATH_LOCATIONS and INCLUDE_LOCATIONS for us, so we
# don't need to do it here

ifeq ($(USE_AMR_CORE), TRUE)
  Pdirs	:= Base AmrCore Amr Boundary
else
  Pdirs := Base
endif

ifeq ($(USE_PARTICLES), TRUE)
 Pdirs += Particle
endif

ifeq ($(USE_MLMG), TRUE)
   DEFINES += -DCASTRO_MLMG
   Pdirs += LinearSolvers/MLMG
endif

Bpack	+= $(foreach dir, $(Pdirs), $(AMREX_HOME)/Src/$(dir)/Make.package)


#------------------------------------------------------------------------------
# microphysics
#------------------------------------------------------------------------------

# Specify that we want to write any automatically generated network
# file (including the general_null network) to our temporary build
# directory
NETWORK_OUTPUT_PATH = $(CASTRO_AUTO_SOURCE_DIR)

USE_CXX_EOS := TRUE

include $(MICROPHYSICS_HOME)/Make.Microphysics_extern

Bpack += $(foreach dir, $(EXTERN_CORE), $(dir)/Make.package)
Blocs += $(foreach dir, $(EXTERN_CORE), $(dir))



#------------------------------------------------------------------------------
# external libraries
#------------------------------------------------------------------------------

ifeq ($(USE_HDF5), TRUE)
  INCLUDE_LOCATIONS += $(HDF5_DIR)/include
  INCLUDE_LOCATIONS += $(HDF5_INCL)
  LIBRARY_LOCATIONS += $(HDF5_DIR)/lib
  LIBRARIES += -lhdf5 -lhdf5_fortran -lhdf5 -lz
endif


#------------------------------------------------------------------------------
# include all of the necessary directories
#------------------------------------------------------------------------------

include $(Bpack)

ifeq ($(MEGA_FORTRAN), TRUE)
   F90EXE_sources += mega_f.F90
   #$(depEXETempDir)/f90.depends: mega_f.F90
else
   f90EXE_sources += $(ca_f90EXE_sources)
   F90EXE_sources += $(ca_F90EXE_sources)
endif

mega_f.F90: $(ca_F90EXE_sources) $(ca_f90EXE_sources)
	$(AMREX_HOME)/Tools/F_scripts/f90cat.py $^

INCLUDE_LOCATIONS += $(Blocs)
VPATH_LOCATIONS   += $(Blocs)


#------------------------------------------------------------------------------
# autogenerated source files
#------------------------------------------------------------------------------

include $(TOP)/Exec/Make.auto_source

#------------------------------------------------------------------------------
# finish up
#------------------------------------------------------------------------------

include $(AMREX_HOME)/Tools/GNUMake/Make.rules

clean::
	$(SILENT) $(RM) extern.F90 prob_params_auto.F90 extern_parameters.H extern_parameters_F.H extern_parameters.cpp
	$(SILENT) $(RM) AMReX_buildInfo.cpp
	$(SILENT) $(RM) $(CASTRO_AUTO_SOURCE_DIR)/*.H $(CASTRO_AUTO_SOURCE_DIR)/*.[fF]90
	@if [ -L helm_table.dat ]; then rm -f helm_table.dat; fi

# these files are now created directly in the CASTRO_AUTO_SOURCE_DIR so eventually we
# can get rid of explicitly removing them (this is for backwards compatability)
clean::
	$(RM) set_conserved.H set_primitive.H set_godunov.H set_indices.F90 state_sizes.f90


# for debugging.  To see the value of a Makefile variable,
# e.g. Fmlocs, simply do "make print-Fmlocs".  This will print out the
# value.

print-%::
	@echo "$* is $($*)"
	@$(RM) AMReX_buildInfo.cpp
