AMREX_HOME ?= /path/to/amrex
CASTRO_HOME ?= /path/to/Castro

# radiation needs hypre
HYPRE_DIR ?= /path/to/Hypre
HYPRE_OMP_DIR ?= /path/to/Hypre--with-openmp

TOP := $(CASTRO_HOME)

# default microphysics locations
EOS_HOME ?= $(TOP)/Microphysics/EOS
NETWORK_HOME ?= $(TOP)/Microphysics/networks
COND_HOME ?= $(TOP)/Microphysics/conductivity
VISC_HOME ?= $(TOP)/Microphysics/viscosity

# backwards compatibility
ifdef Network_dir
  ifndef NETWORK_DIR
    NETWORK_DIR := $(Network_dir)
  endif
endif

ifdef EOS_dir
  ifndef EOS_DIR
    EOS_DIR := $(EOS_dir)
  endif
endif

ifdef Conductivity_dir
  ifndef CONDUCTIVITY_DIR
    CONDUCTIVITY_DIR := $(Conductivity_dir)
  endif
endif

EBASE = Castro

# EXTERN_CORE is simply a list of the directories we use in EOS,
# Networks and Util this list will be searched for runtime parameters
EXTERN_CORE ?=


# need to put any build suffices before Make.defs
ifeq ($(USE_SDC), TRUE)
  USERSuffix = .SDC
endif

ifeq ($(USE_RAD), TRUE)
  ifeq ($(USE_NEUTRINO), TRUE)
    USERSuffix = .Neutrino
  endif
endif

include $(AMREX_HOME)/Tools/GNUMake/Make.defs

all: $(executable)
	@echo SUCCESS

# Castro uses a coarse grained OMP approach
DEFINES += -DCRSEGRNDOMP

# The default is to include the sponge functionality
DEFINES += -DSPONGE

# OpenACC support
ifeq ($(USE_ACC), TRUE)
  DEFINES += -DACC
endif

USE_MG = FALSE

#------------------------------------------------------------------------------
# Castro directories
#------------------------------------------------------------------------------

Bdirs := Source/driver Source/driver/param_includes \
         Source/hydro Source/problems Source/sources \
         constants Util/model_parser

# add / define any special physics we need
ifeq ($(USE_GRAV), TRUE)
  Bdirs += Source/gravity
  DEFINES += -DGRAVITY
  USE_MG = TRUE

  ifndef USE_SELF_GRAV
    USE_SELF_GRAV = TRUE
  endif

  ifeq ($(USE_SELF_GRAV), TRUE)
    DEFINES += -DSELF_GRAVITY
  endif
endif

ifeq ($(USE_GR), TRUE)
  DEFINES += -DGR_GRAV
endif

ifeq ($(USE_POINTMASS), TRUE)
   DEFINES += -DPOINTMASS
endif

ifeq ($(USE_REACT), TRUE)
  Bdirs += Source/reactions
  DEFINES += -DREACTIONS
endif

ifeq ($(USE_SDC), TRUE)
  DEFINES += -DSDC
endif

ifeq ($(USE_DIFFUSION), TRUE)
  Bdirs += Source/diffusion
  DEFINES += -DDIFFUSION
  USE_MG = TRUE
endif

ifeq ($(USE_HYBRID_MOMENTUM), TRUE)
  ifeq ($(DIM), 3)
    DEFINES += -DHYBRID_MOMENTUM
  else
    $(error USE_HYBRID_MOMENTUM requires 3-d)
  endif
endif

ifeq ($(USE_SHOCK_VAR), TRUE)
  DEFINES += -DSHOCK_VAR
endif

ifeq ($(USE_AUX_UPDATE), TRUE)
  DEFINES += -DAUX_UPDATE
endif

ifeq ($(USE_POST_SIM), TRUE)
  DEFINES += -DDO_PROBLEM_POST_SIMULATION
endif

ifeq ($(USE_RAD), TRUE)
  Bdirs += Source/radiation Source/radiation/_interpbndry
  DEFINES += -DRADIATION
  DEFINES += -DRAD_INTERP
  USE_HYPRE := TRUE

  EXTERN_CORE += $(TOP)/Util/LAPACK

  ifeq ($(USE_NEUTRINO), TRUE)
    DEFINES += -DNEUTRINO
    ifeq ($(USE_DUMPMODEL), TRUE)
      DEFINES += -DHAS_DUMPMODEL
    endif
  endif
endif

ifeq ($(USE_MAESTRO_INIT), TRUE)
   DEFINES +=  -DBL_NOLINEVALUES -DBL_PARALLEL_IO -DMAESTRO_INIT
   CEXE_headers += DataServices.H AmrData.H AmrvisConstants.H
   CEXE_sources += DataServices.cpp AmrData.cpp
   FEXE_sources += FABUTIL_$(DIM)D.F
   VPATH_LOCATIONS   += $(AMREX_HOME)/Src/Extern/amrdata
   INCLUDE_LOCATIONS += $(AMREX_HOME)/Src/Extern/amrdata
endif

ifeq ($(USE_ROTATION), TRUE)
  Bdirs += Source/rotation
  DEFINES += -DROTATION
endif

ifeq ($(USE_PARTICLES), TRUE)
  Bdirs += Source/particles
endif

Bpack += $(foreach dir, $(Bdirs), $(TOP)/$(dir)/Make.package)
Blocs += $(foreach dir, $(Bdirs), $(TOP)/$(dir))


#------------------------------------------------------------------------------
# AMReX
#------------------------------------------------------------------------------

# core AMReX directories -- note the Make.package for these adds these
# directories into VPATH_LOCATIONS and INCLUDE_LOCATIONS for us, so we
# don't need to do it here

Pdirs 	:= Base AmrCore Amr Boundary

ifeq ($(USE_PARTICLES), TRUE)
 Pdirs += Particle
endif

ifeq ($(USE_RAD), TRUE)
  Pdirs += LinearSolvers/C_CellMG
endif

Bpack	+= $(foreach dir, $(Pdirs), $(AMREX_HOME)/Src/$(dir)/Make.package)

ifeq ($(USE_MG), TRUE)
   include $(AMREX_HOME)/Src/LinearSolvers/C_to_F_MG/Make.package
   include $(AMREX_HOME)/Src/LinearSolvers/F_MG/FParallelMG.mak
endif


#------------------------------------------------------------------------------
# microphysics 
#------------------------------------------------------------------------------

ifdef MICROPHYSICS_HOME
   EOS_PATH := $(MICROPHYSICS_HOME)/EOS/$(strip $(EOS_DIR))
   NETWORK_PATH := $(MICROPHYSICS_HOME)/networks/$(strip $(NETWORK_DIR))
ifeq ($(USE_DIFFUSION), TRUE)
   COND_PATH := $(MICROPHYSICS_HOME)/conductivity/$(strip $(CONDUCTIVITY_DIR))
endif
endif

# if the EOS / network / conductivity name exists in
# Castro/Microphysics, then use that version

ifneq "$(wildcard $(EOS_HOME)/$(strip $(EOS_DIR)) )" ""
   EOS_PATH := $(EOS_HOME)/$(strip $(EOS_DIR))
endif

ifneq "$(wildcard $(NETWORK_HOME)/$(strip $(NETWORK_DIR)) )" ""
   NETWORK_PATH := $(NETWORK_HOME)/$(strip $(NETWORK_DIR))
endif

ifeq ($(USE_DIFFUSION), TRUE)
ifneq "$(wildcard $(COND_HOME)/$(strip $(CONDUCTIVITY_DIR)) )" ""
   COND_PATH := $(COND_HOME)/$(strip $(CONDUCTIVITY_DIR))
endif
   VISC_PATH := $(VISC_HOME)/constant
endif

# Problems can specify the input file for general_null by setting
# GENERAL_NET_INPUTS directly (full path) or just specifying the name
# of the inputs file as NETWORK_INPUTS and let us sort it out
ifndef GENERAL_NET_INPUTS
   ifneq "$(wildcard $(NETWORK_INPUTS))" ""
      GENERAL_NET_INPUTS := $(NETWORK_INPUTS)
   else
      GENERAL_NET_INPUTS := $(CASTRO_HOME)/Microphysics/networks/general_null/$(NETWORK_INPUTS)
   endif
endif

EXTERN_CORE += $(EOS_HOME)
EXTERN_CORE += $(EOS_PATH)

# the helmholtz EOS has an include file -- also add a target to link
# the table into the problem directory.
ifeq ($(findstring helmholtz, $(EOS_DIR)), helmholtz)
   all: table
endif

table:
	@if [ ! -f helm_table.dat ]; then echo Linking helm_table.dat; ln -s $(EOS_PATH)/helm_table.dat .;  fi

EXTERN_CORE += $(NETWORK_HOME)
EXTERN_CORE += $(NETWORK_PATH)

# Note that this should be located after the include of the EOS and
# Network includes since it has actions that depend on variables set
# there.

ifdef MICROPHYSICS_HOME
  EXTERN_CORE += $(MICROPHYSICS_HOME)/EOS
  EXTERN_CORE += $(MICROPHYSICS_HOME)/networks
endif

ifeq ($(USE_DIFFUSION), TRUE)
   EXTERN_CORE += $(TOP)/Microphysics/conductivity
   EXTERN_CORE += $(COND_HOME)
   EXTERN_CORE += $(COND_PATH)
   EXTERN_CORE += $(VISC_PATH)
endif

ifeq ($(USE_RAD), TRUE)
   OPAC_PATH := $(TOP)/Microphysics/opacity/$(Opacity_dir)
   EXTERN_CORE += $(OPAC_PATH)
endif

Bpack += $(foreach dir, $(EXTERN_CORE), $(dir)/Make.package)
Blocs += $(foreach dir, $(EXTERN_CORE), $(dir))


#------------------------------------------------------------------------------
# external libraries
#------------------------------------------------------------------------------

ifeq ($(USE_HYPRE), TRUE)
  ifeq ($(USE_OMP), TRUE)
    INCLUDE_LOCATIONS += $(HYPRE_OMP_DIR)/include
    LIBRARY_LOCATIONS += $(HYPRE_OMP_DIR)/lib
  else
    INCLUDE_LOCATIONS += $(HYPRE_DIR)/include
    LIBRARY_LOCATIONS += $(HYPRE_DIR)/lib
  endif
  LIBRARIES += -lHYPRE
endif

ifeq ($(USE_HDF5), TRUE)
  INCLUDE_LOCATIONS += $(HDF5_DIR)/include
  INCLUDE_LOCATIONS += $(HDF5_INCL)
  LIBRARY_LOCATIONS += $(HDF5_DIR)/lib
  LIBRARIES += -lhdf5 -lhdf5_fortran -lhdf5 -lz
endif


#------------------------------------------------------------------------------
# include all of the necessary directories
#------------------------------------------------------------------------------

include $(Bpack)

ifeq ($(MEGA_FORTRAN), TRUE)
   F90EXE_sources += mega_f.F90
   #$(depEXETempDir)/f90.depends: mega_f.F90
else
   f90EXE_sources += $(ca_f90EXE_sources)
   F90EXE_sources += $(ca_F90EXE_sources)
endif

mega_f.F90: $(ca_F90EXE_sources) $(ca_f90EXE_sources)
	$(AMREX_HOME)/Tools/F_scripts/f90cat.py $^

INCLUDE_LOCATIONS += $(Blocs)
VPATH_LOCATIONS   += $(Blocs)


include $(AMREX_HOME)/Src/F_BaseLib/FParallelMG.mak

#------------------------------------------------------------------------------
# runtime parameters
#------------------------------------------------------------------------------

# runtime parameter support for extern/ routines
f90EXE_sources += extern.f90

EXTERN_TEMPLATE := $(TOP)/Source/driver/extern_probin.template

# these are for finding runtime parameters
EXTERN_SEARCH += $(EXTERN_CORE) $(TOP)/constants $(TOP)/Util/model_parser
ifdef MICROPHYSICS_HOME
   EXTERN_SEARCH += $(MICROPHYSICS_HOME)/networks/
endif

EXTERN_PARAMETERS := $(shell $(AMREX_HOME)/Tools/F_scripts/findparams.py $(EXTERN_SEARCH))

extern.f90: $(EXTERN_PARAMETERS) $(EXTERN_TEMPLATE)
	$(AMREX_HOME)/Tools/F_scripts/write_probin.py \
           -t $(EXTERN_TEMPLATE) -o extern.f90 -n extern \
           --pa "$(EXTERN_PARAMETERS)"

#------------------------------------------------------------------------------
# build info
#------------------------------------------------------------------------------

# job_info support
CEXE_headers += $(AMREX_HOME)/Tools/C_scripts/AMReX_buildInfo.H
INCLUDE_LOCATIONS +=  $(AMREX_HOME)/Tools/C_scripts


MNAMES := EOS=$(EOS_PATH) NETWORK=$(NETWORK_PATH)
ifeq ($(USE_DIFFUSION), TRUE)
   MNAMES += CONDUCTIVITY=$(COND_PATH)
   MNAMES += VISCOSITY=$(VISC_PATH)
endif

ifeq ($(USE_RAD), TRUE)
   MNAMES += OPACITY=$(OPAC_PATH)
endif

# we make AMReX_buildInfo.cpp as we make the .o file, so we can delete
# it immediately.  this way if the build is interrupted, we are
# guaranteed to remake it

objForExecs += $(objEXETempDir)/AMReX_buildInfo.o

.FORCE:
.PHONE: .FORCE

# set BUILD_GIT_NAME and BUILD_GIT_DIR if you are building in a
# git-controlled dir not under Castro/
EXTRA_BUILD_INFO :=
ifdef BUILD_GIT_NAME
   EXTRA_BUILD_INFO := --build_git_name "$(BUILD_GIT_NAME)" \
                       --build_git_dir "$(BUILD_GIT_DIR)"
endif

$(objEXETempDir)/AMReX_buildInfo.o: .FORCE
	$(AMREX_HOME)/Tools/C_scripts/makebuildinfo_C.py \
          --amrex_home "$(AMREX_HOME)" \
          --COMP "$(COMP)" --COMP_VERSION "$(COMP_VERSION)" \
          --CXX_comp_name "$(CXX)" --CXX_flags "$(CXXFLAGS) $(CPPFLAGS) $(includes)" \
          --F_comp_name "$(F90)" --F_flags "$(F90FLAGS)" \
          --link_flags "$(LDFLAGS)" --libraries "$(libraries)" \
          --MODULES "$(MNAMES)" $(EXTRA_BUILD_INFO) \
          --GIT "$(TOP) $(AMREX_HOME) $(MICROPHYSICS_HOME)"
	$(SILENT) $(CCACHE) $(CXX) $(CXXFLAGS) $(CPPFLAGS) -c $(CXXEXEFLAGS) AMReX_buildInfo.cpp -o $(objEXETempDir)/AMReX_buildInfo.o
	$(SILENT) $(RM) AMReX_buildInfo.cpp


#------------------------------------------------------------------------------
# finish up
#------------------------------------------------------------------------------

include $(AMREX_HOME)/Tools/GNUMake/Make.rules

clean::
	$(SILENT) $(RM) extern.f90
	$(SILENT) $(RM) AMReX_buildInfo.cpp

# Older versions of CASTRO generated a "network.f90" file when using
# the general_null network, which conflicts with our generalized
# network.f90 file.  So we should delete the local copy if we are
# trying to rebuild from an old directory.

clean::
	$(RM) network.f90
	@if [ -L helm_table.dat ]; then rm -f helm_table.dat; fi


# for debugging.  To see the value of a Makefile variable,
# e.g. Fmlocs, simply do "make print-Fmlocs".  This will print out the
# value.

print-%::
	@echo "$* is $($*)"
	@$(RM) AMReX_buildInfo.cpp
